#!/usr/bin/env python3

## example_function_name
## ExampleVariableName

import random


ListOfSettings =[
    'high fantasy', 'low fantasy', 'grim fantasy', 'age of sail', 'medieaval'
    'space opera', 'cyberpunk', 'urban fantasy', 'slice-of-life','post-apocalypse',
    'ancient legends', 'hard sci fi', 'steampunk', '1920s pulp', 'solarpunk',
    'pike and musket', 'victorina', 'colonial', 'diesel punk', 'dystopia', 
    'alternate history', 'biopunk', 'cold war', 'weird world war', 'superhero comic'
    ]

ListOfParties =[
    'circus', 'first responders', 'mercenaries', 'city gaurds', 'criminal gang',
    'merchant convoy', 'monster hunters', 'smugglers', 'traders',
    'investigators', 'boarding school', 'university dept', 'neighbours', 'village',
    'operatives', 'rebels', 'police','refugees','outsiders','beaureucrats'
    ]
    

ListOfThemes =[
'balance',
'belief',
'change',
'comfort',
'destruction ',
'corruption',
'family ',
'freedom',
'friendship',
'glory',
'honour',
'hunger',
'justice',
'knowledge ',
'law/tradition',
'love',
'pain',
'revenge',
'unity',
'survival',
'violence',
'wealth',
]

ListOfDefaultMoves=(
    'Stop Adding Moves',
    'Keep calm',
    'Ignore difficulties',
    'Take damage',
    'Act forcefully',
    'Act carefullly',
    'Act stylishly',
    'Seduce',
    'Persuade',
    'Threaten',
    'Assess',
    'Investigate',
    'Recall knowledge'
        )

ListofDefaultGMPrinciples=(
    'sprinkle evocative details everywhere ',
    'make the world seem real',
    'name everyone, make everyone human',
    'build a bigger world through play',
    'create interesting dilemmas not interesting plots',
    'address yourself to the characters not players',
    'be a fan of the players characters',
    'make your move but misdirect',
    'make your move, but never speak its name',
    'ask provocative questions and build on the answers',
    'sometimes, reflect a question back upon the players',
    'Think off screen too',
        )

ListofDefaultGMMoves =(
    'give them a difficult decision to make',
    'tell them the possible consequences and ask',
    'Use a front or threat move',
    'Offer an opportunity, with or without a cost',
    'Turn a failed move back on them',
    'Offer Stuff that is painfully expensive but good',
    'Put the spotlight on someone',
    'seperate them',
    'Put them together',
    'make thier lives complicated now',
    'use up their resources ',
    'activate bad side of stuff',
        )

ListofPlayerMoveTriggers =(
    'when you do something related to (specialty) bonus',
    'you have the ability to (active power). it counts as base move using (stat)',
    'you have (passive power with constant effect)',
    'you have a (thing). when applicable it adds two bonuses',
    'Straight bonus',
    'When you interact with another player, bonus',
    'when you do (specialty) get hold. spend hold for bonus'
        )
    
ListofPlayerMoveBonus =(
    'bonus of +1 to stat',
    'bonus of reroll a fail',
    'bonus of mark xp',
    'power of springboard fiction (eg cast light)',
    'power of mechanical fiction (eg healing)',
    'get knowledge ',
    'juicy list of 3 options. 7+ choose 1, 10+ choose ',
    'juicy move of 3 problems. 7+ avoid 1, 10+ avoid 3',
    'Oddball list - juicy list of 3 options +1 oddball. Choose oddball for auto 10+ at a cost, or 7+ choose 1, 10+ choose ',
        )
   
ListofPlayerEngineParts =(
    'start of session momemtum triggers',
    'Cast of NPCs',
    'cataliser of conflict',
    'expand map',
    'Instigate threat',
    'fixed point to defend/orbit',
    'need for supplies',
    'supports risky play',
    'countdown urgency',
    'broadcast npc motivations',
    'Mostly obediant entity',
    'director stance',
    'author stance'
        )

def get_seed():
    Title = input("What is your game called?")
    Setting = input("What is the broad setting? High Fantasy? Cyberpunk? ")
    if Setting == '':
        Setting = get_setting()
    if Title == '':
        i=int(len(Setting)/3)
        Title = Setting[:i]+Setting[i*2:] + " World"
        Title = Title.upper() 
    return(Title, Setting)

def get_setting():
    Setting = random.randint(0, len(ListOfSettings)-1)
    Party = random.randint(0, len(ListOfParties)-1)
    Setting = ListOfSettings[Setting]
    Party = ListOfParties[Party]
    FullSetting = Party+' in '+Setting
    return(FullSetting)

def get_premise():
    PremA = random.randint(0, len(ListOfThemes)-1)
    PremB = random.randint(0, len(ListOfThemes)-1)
    PremA = ListOfThemes[PremA]
    PremB = ListOfThemes[PremB]
    return(PremA, PremB)

def rank_prems(PremA, PremB):
    print("/n EXPLORING PREMISE /n")
    print("How important to the game expereience is ", PremA, "?")
    PremARank = input("blank = random 1 = Very, has a dedicated mechanic, 2= A bit, has a dedicated stat, 3= not, ignore it.") or random.randint(1,3)
    print("How important is ", PremB, "?")
    PremBRank =  input("blank = random, 1 = Very, has a dedicated mechanic, 2= A bit, has a dedicated stat, 3= not, ignore it.") or random.randint(1,3)
    if PremARank == '3' and PremBRank == '3':
        print("your game needs to be about something")
        PremA, PremB = get_premise()
        PremARank, PremBRank = rank_prems(PremA, PremB)
    PremATuple = (PremA, PremARank)
    PremBTuple = (PremB, PremBRank)
    print(PremATuple, PremBTuple)
    return(PremATuple, PremBTuple)

def get_stats(ListOfStats):
    DictOfMoves={}
    KeyIndex =5 ## inital value only
    
    print('Current Stats: ', ListOfStats)
    print('Choose some of these deafult moves (five is common, zero is possible, all twelve waters down the playbooks a bit.')
    for index, move in enumerate(ListOfDefaultMoves):
        print(index, ' : ', move)
    
    while KeyIndex !=0:
        KeyIndex= int(input('Number of move on list above  '))or 0 
        if KeyIndex == 0:
            break
        StatName= input('Name of the Stat you roll for that  ')
        MoveName= input('Custom Move name, (or leave blank for deafult  ') or ListOfDefaultMoves[KeyIndex]
        ## by default, allow move=stat associations to be overridden
        DictOfMoves[MoveName]= StatName
    
                                        
def name_custom_stats(PremATuple, PremBTuple):
    if PremATuple[1]=='2':
        ListOfStats.append(PremATuple[0])
    if PremBTuple[1]=='2':
        ListOfStats.append(PremBTuple[0])
    return(ListOfStats)
    
    
        
def get_random_player_move(StatA, StatB, Engine):
    ChooserList=[StatA, StatA, StatB, Engine]
    C1 = random.randint(0,len(ChooserList))
    C2 = random.randint(0,len(ListofPlayerMoveTriggers))
    C3 = randome.randint(0, len(ListofPlayerMoveBonus))
    
    print
    
    
    
      
def print_coverpage():
    print(Title)
    print('A', Setting, ' about ', PremA,' and ', PremB)

## Main

## TODO
## Do you know what the heart of yourgame is?
## yes
## no -> PremA, PremB = get_premise()

## How important is PremA - Very, A bit, not
## if both not PremA, PremB = get_premise()
## very = lookup_mechanic
## a bit = statA, StatB

Title, Setting = get_seed()
PremA, PremB = get_premise()

print_coverpage()

PremATuple, PremBTuple = rank_prems(PremA, PremB)
ListOfStats = []
ListOfStats = name_custom_stats(PremATuple, PremBTuple)                           
ListOfStats, DictOfMoves = get_stats(ListOfStats)

      




